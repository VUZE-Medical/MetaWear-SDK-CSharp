<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Warble.NetStandard</name>
    </assembly>
    <members>
        <member name="T:MbientLab.Warble.Gatt">
            <summary>
            Wrapper around the WarbleGatt C struct
            </summary>
        </member>
        <member name="P:MbientLab.Warble.Gatt.OnDisconnect">
            <summary>
            Handler that listens for disconnect events
            </summary>
        </member>
        <member name="P:MbientLab.Warble.Gatt.IsConnected">
            <summary>
            True if currently connected to the remote device
            </summary>
        </member>
        <member name="M:MbientLab.Warble.Gatt.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a C# Warble Gatt object
            </summary>
            <param name="mac">Mac address of the board to connect to e.g. E8:C9:8F:52:7B:07</param>
            <param name="hci">Mac address of the hci device to use, only applicable on Linux</param>
            <param name="addrType">Ble address type, defaults to random</param>
        </member>
        <member name="M:MbientLab.Warble.Gatt.ConnectAsync">
            <summary>
            Establishes a connection to the remote device
            </summary>
            <returns>Null when connection is established</returns>
            <exception cref="T:MbientLab.Warble.WarbleException">If device cannot be found or cannot connect within a time range</exception>
        </member>
        <member name="M:MbientLab.Warble.Gatt.Disconnect">
            <summary>
            Disconnects from the remote device
            </summary>
        </member>
        <member name="M:MbientLab.Warble.Gatt.FindCharacteristic(System.String)">
            <summary>
            Find the GATT characteristic corresponding to the uuid value 
            </summary>
            <param name="uuid"></param>
            <returns>Object representing gatt characteristic, null if it does not exist</returns>
        </member>
        <member name="M:MbientLab.Warble.Gatt.ServiceExists(System.String)">
            <summary>
            Check if a GATT service with the corresponding UUID exists on the device
            </summary>
            <param name="uuid">128-bit UUID string to lookup</param>
            <returns>True if GATT service exists, false otherwise</returns>
        </member>
        <member name="T:MbientLab.Warble.GattChar">
            <summary>
            Wrapper class around the WarbleGattChar C struct
            </summary>
        </member>
        <member name="P:MbientLab.Warble.GattChar.Uuid">
            <summary>
            128-bit UUID string identifying this GATT characteristic
            </summary>
        </member>
        <member name="P:MbientLab.Warble.GattChar.OnNotificationReceived">
            <summary>
            Handler to process characteristic notifications, <see cref="M:MbientLab.Warble.GattChar.EnableNotificationsAsync"/>
            </summary>
        </member>
        <member name="M:MbientLab.Warble.GattChar.WriteAsync(System.Byte[])">
            <summary>
            Writes value to the characteristic requiring an acknowledge from the remote device
            </summary>
            <param name="value">Value to write</param>
            <returns>Null when the write operation completes</returns>
            <exception cref="T:MbientLab.Warble.WarbleException">If write operation fails</exception>
        </member>
        <member name="M:MbientLab.Warble.GattChar.WriteWithoutResponseAsync(System.Byte[])">
            <summary>
            Writes value to the characteristic without requesting a response from the remove device
            </summary>
            <param name="value">Value to write</param>
            <returns>Null when the write operation completes</returns>
            <exception cref="T:MbientLab.Warble.WarbleException">If write operation fails</exception>
        </member>
        <member name="M:MbientLab.Warble.GattChar.ReadAsync">
            <summary>
            Reads current value from the characteristic
            </summary>
            <returns>Characteristic value when the read operation completes</returns>
            <exception cref="T:MbientLab.Warble.WarbleException">If read operation fails</exception>
        </member>
        <member name="M:MbientLab.Warble.GattChar.EnableNotificationsAsync">
            <summary>
            Enables characteristic notifications, which are forwarded to the <see cref="P:MbientLab.Warble.GattChar.OnNotificationReceived"/> delegate
            </summary>
            <returns>Null when notifications are enabled</returns>
            <exception cref="T:MbientLab.Warble.WarbleException">If notify enable operation fails</exception>
        </member>
        <member name="M:MbientLab.Warble.GattChar.DisableNotificationsAsync">
            <summary>
            Disables characteristic notifications 
            </summary>
            <returns>Null when notifications are disabled</returns>
            <exception cref="T:MbientLab.Warble.WarbleException">If notify disable operation fails</exception>
        </member>
        <member name="T:MbientLab.Warble.Library">
            <summary>
            General library level functions
            </summary>
        </member>
        <member name="M:MbientLab.Warble.Library.GetVersion">
            <summary>
            Checks the version of the native Warble C library used by the wrwapper
            </summary>
            <returns>Semantic version in the form x.y.z</returns>
        </member>
        <member name="M:MbientLab.Warble.Library.GetConfig">
            <summary>
            Checks the build configuration of the native Warble C library used by the wrapper
            </summary>
            <returns>Either 'Release' or 'Debug'</returns>
        </member>
        <member name="M:MbientLab.Warble.Library.Init(System.String)">
            <summary>
            Initializes the Warble library
            </summary>
            <param name="logLevel">One of: 'error', 'warning', 'info', 'debug', 'trace', only available on Linux</param>
        </member>
        <member name="T:MbientLab.Warble.ScanResult">
            <summary>
            Information received from a discovered BLE device
            </summary>
        </member>
        <member name="P:MbientLab.Warble.ScanResult.Mac">
            <summary>
            Mac address of the scanned device
            </summary>
        </member>
        <member name="P:MbientLab.Warble.ScanResult.Name">
            <summary>
            Device's advertising name
            </summary>
        </member>
        <member name="P:MbientLab.Warble.ScanResult.Rssi">
            <summary>
            Device's current signal strength
            </summary>
        </member>
        <member name="M:MbientLab.Warble.ScanResult.HasServiceUuid(System.String)">
            <summary>
            Checks if the BLE ad packet contains the requested service UUID
            </summary>
            <param name="uuid">128-bit UUID string to search for</param>
            <returns>True if the device is advertising with the uuid, false otherwise</returns>
        </member>
        <member name="M:MbientLab.Warble.ScanResult.GetManufacturerData(System.UInt16)">
            <summary>
            Additional data from the manufacturer included in the scan response
            </summary>
            <param name="companyId">Unsigned short value to look up</param>
            <returns>Manufacturer data, null if company ID is not found</returns>
        </member>
        <member name="T:MbientLab.Warble.Scanner">
            <summary>
            Controls BLE scanning
            </summary>
        </member>
        <member name="P:MbientLab.Warble.Scanner.OnResultReceived">
            <summary>
            Handler to listen for BLE scan results
            </summary>
        </member>
        <member name="M:MbientLab.Warble.Scanner.Start(System.String,System.String)">
            <summary>
            Start BLE scanning
            </summary>
            <param name="hci">Mac address of the hci device to use, only applicable on Linux</param>
            <param name="scanType">Type of ble scan to perform, either 'passive' or 'active'</param>
        </member>
        <member name="M:MbientLab.Warble.Scanner.Stop">
            <summary>
            Stop BLE scanning
            </summary>
        </member>
        <member name="T:MbientLab.Warble.WarbleException">
            <summary>
            Represents errors that occur with the Warble library
            </summary>
        </member>
    </members>
</doc>
